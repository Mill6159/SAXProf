import numpy as np
from matplotlib import pyplot as plt

class ERRORPROP:

    def __init__(self, saxs1 = [], I_no_noise = [], I_w_noise = [], I_no_noise_calc = [], c = []):
        """
        Description:
        """
        self.saxs1 = saxs1

        # generate buffer profile. simulate_buf uses trimmed mask_q for q-values
        try:
            (synth_buf, MT_cell, Vac_cell, win_cell, buf_cell) = saxs1.simulate_buf(subtracted=True)
        except ValueError as e:  # this essentially says if a ValueError occurs, call it e, extracts the args component
            print(e.args)  # of the instance, and has it printed, and then forces the ValueError to occur.
            raise e

        for c in np.arange(0.05, 5.0, 0.1):
            saxs1.c = c

            # calculate synthetic curve on buf_model profile generated by simulate_buf
            I_no_noise = saxs1.I_of_q(saxs1.c, saxs1.mw, saxs1.buf_model_q)

            # calculate noisy profile on mask_q points that fall within both buf's q range and the specified default_q range (mask_q_short)
            I_w_noise = saxs1.t * saxs1.pixel_size ** 2 * saxs1.with_noise(saxs1.t, saxs1.buf_model_q, I_no_noise)

            # calculated smooth I on default_q (goes all the way to q = 0)
            I_no_noise = saxs1.t * saxs1.pixel_size ** 2 * I_no_noise

            # calculated smooth I and sigma on same q points as I_w_noise
            I_no_noise_calc = saxs1.Icalc * saxs1.t * saxs1.pixel_size ** 2  # in register with buffer

        self.c = np.arange(0.05, 5.0, 0.1)
        self.I_no_noise = I_no_noise
        self.I_w_noise = I_w_noise
        self.I_no_noise_calc = I_no_noise_calc

    def calc_errRg(self, imin = [], imax = []):
        saxs1 = self.saxs1
        I_w_noise = self.I_w_noise
        conc = []
        errRg = []
        sig2_Rg_out = []
        if imin == [] and imax == []:
            for c in np.arange(0.05,5.0,0.1):
                saxs1.c = c
                imin = 0
                imax = 90
                # calculate synthetic curve on buf_model profile generated by simulate_buf
                I_no_noise = saxs1.I_of_q(saxs1.c, saxs1.mw, saxs1.buf_model_q)
                # calculate noisy profile on mask_q points that fall within both buf's q range and the specified default_q range (mask_q_short)
                I_w_noise = saxs1.t * saxs1.pixel_size ** 2 * saxs1.with_noise(saxs1.t, saxs1.buf_model_q, I_no_noise)

                log_sigma = np.empty(len(saxs1.sigma))
                for i in range(len(saxs1.sigma) - 1):
                    log_sigma[i] = np.abs(saxs1.sigma[i] / I_w_noise[i])  # converts sigma of the variable to sigma for log of the variable
                    # return log_sigma

                (inter, slope, sig2_inter, sig2_slope) = saxs1.lsqfity_with_sigmas(saxs1.buf_model_q[imin:imax] ** 2, np.log(I_w_noise[imin:imax]),
                                                                               log_sigma[imin:imax])

                Rg = np.sqrt(-3 * slope)
                sig_Rg = np.abs(
                    Rg * np.sqrt(sig2_slope) / (2 * slope))  # converts the sigma^2 for the slope to the sigma of Rg

                # err_Rg = np.sqrt(-3*err_slope)
                # print c,Rg,sig_Rg/Rg,Rg*saxs1.buf_model_q[imax]

                ## lists to append to each iteration of the loop.
                sig2_Rg_out.append(sig_Rg)
                conc.append(saxs1.c)
                errRg.append(sig_Rg / Rg)
            return conc, errRg, sig2_Rg_out
        print('Default imin/imax values used: 0 and 90')


    def plot_S1(self, X, Y, plotlabel = '', savelabel = ''):
        if plotlabel == '' and savelabel == '':
            plotlabel = 'No label provided'
            savelabel = 'No_Label_Provided'
            plt.rc("axes", linewidth=2)
            plt.rc("lines", markeredgewidth=2)
            plt.rc('font', **{"sans-serif": ["Arial"]})
            fig = plt.figure(figsize=(8, 8))
            ax1 = fig.add_subplot(1, 1, 1)
            for tick in ax1.xaxis.get_major_ticks():
                tick.label1.set_fontsize(20)
                tick.label1.set_fontname('Helvetica')
            for tick in ax1.yaxis.get_major_ticks():
                tick.label1.set_fontsize(20)
            plt.legend(numpoints=1, fontsize=18, loc="best")
            plt.plot(X, Y, '-o', label=plotlabel)
            plt.savefig(savelabel + ".png", format='png',
                        bbox_inches = 'tight')
            plt.show()
        else:
            plt.rc("axes", linewidth=2)
            plt.rc("lines", markeredgewidth=2)
            plt.rc('font', **{"sans-serif": ["Arial"]})
            fig = plt.figure(figsize=(8, 8))
            ax1 = fig.add_subplot(1, 1, 1)
            for tick in ax1.xaxis.get_major_ticks():
                tick.label1.set_fontsize(20)
                tick.label1.set_fontname('Helvetica')
            for tick in ax1.yaxis.get_major_ticks():
                tick.label1.set_fontsize(20)
            plt.legend(numpoints=1, fontsize=18, loc="best")
            plt.plot(X, Y, '-o', label=plotlabel)
            plt.savefig(savelabel + ".png", format='png',
                        bbox_inches = 'tight')
            plt.show()

    def tester(self):
        print(self.saxs1.sigma)


